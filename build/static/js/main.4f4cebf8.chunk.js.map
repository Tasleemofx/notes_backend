{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.jsx","components/Footer.jsx","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","url","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","type","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","alert","setAlert","alertType","setAlertType","useEffect","noteService","notesToShow","filter","map","find","n","changedNote","setTimeout","catch","error","onSubmit","e","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f4cebf8.chunk.js","sourcesContent":["import React from 'react';\r\nconst Note=({note, toggleImportance})=>{\r\n    const label = note.important\r\n    ? 'make not important': 'make important'\r\n    return(\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggleImportance}>\r\n                {label}\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios';\r\n\r\n\r\nconst url = 'http://localhost:3001/api/notes'\r\n\r\nconst getAll =()=>{\r\n    const request = axios.get(url)\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create= newObject =>{\r\n    const request = axios.post(url, newObject)\r\n    return request.then(response=> response.data)\r\n}\r\n\r\nconst update =(id, newObject)=>{\r\n    const request= axios.put(`${url}/${id}`, newObject)\r\n    return request.then(response=> response.data)\r\n}\r\n\r\nexport default {\r\n    getAll, create, update\r\n}","const Notification =({message, type})=>{\r\n    if(message===null){\r\n        return null\r\n    }\r\n    return(\r\n    <div className={type}>\r\n        {message}\r\n    </div> )\r\n}\r\n\r\nexport default Notification","const Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n      by Oladepo Tesleem\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { useEffect, useState } from 'react';\r\nimport Note from \"./components/Note\"\r\nimport './App.css';\r\nimport noteService from './services/notes'\r\nimport Notification from \"./components/Notification\"\r\nimport Footer from './components/Footer';\r\n\r\n\r\nfunction App() {\r\n  \r\n  const[notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll]= useState(true)\r\n  const [alert, setAlert] = useState(null)\r\n  const [alertType, setAlertType] = useState('success')\r\n\r\n  const toggleImportance=(id)=>{\r\n  const note = notes.find(n=> n.id === id)\r\n  const changedNote = { ...note, important: !note.important}\r\n  \r\n  noteService\r\n  .update(id, changedNote)\r\n  .then(response=>{\r\n    setNotes(notes.map(note=> note.id !== id? note: response))\r\n    setAlert(`the note '${changedNote.content}' has been \r\n    made ${note.important? 'not important':'important'}`)\r\n    setAlertType('success')\r\n    setTimeout(() => {\r\n      setAlert(null)\r\n    }, 5000)\r\n  })\r\n  .catch(error=>{\r\n    setAlert(`the note '${note.content}' does not exist on the server`)\r\n    setAlertType('error')\r\n    setTimeout(()=>{\r\n      setAlert(null)\r\n    }, 5000)\r\n    setNotes(notes.filter(n => n.id !== id))\r\n  })  \r\n  }\r\n   const hook =()=>{ \r\n    noteService\r\n    .getAll()\r\n      .then(response => {\r\n        setNotes(response);\r\n      })\r\n    }\r\n  useEffect(hook, [])\r\n  const addNote=(e)=>{\r\n    e.preventDefault()\r\n    const noteObject ={\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5\r\n    }\r\n    noteService\r\n    .create(noteObject)\r\n    .then(response=>{\r\n      setNotes(notes.concat(response))\r\n      setNewNote('')\r\n      setAlert(`the note '${noteObject.content}' has been added to the server`)\r\n      setAlertType('success')\r\n      setTimeout(() => {\r\n        setAlert(null)\r\n      }, 5000)\r\n    })\r\n    \r\n  }\r\n  const handleNoteChange=(e)=>{\r\n    setNewNote(e.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n  ? notes\r\n  : notes.filter(note => note.important === true)\r\n  return (\r\n    <div>\r\n      <Notification message={alert} type={alertType}/>\r\n\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={()=> setShowAll(!showAll)}>\r\n          show {showAll? 'important': 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map(note=>\r\n        <Note key={note.id}\r\n         note={note}\r\n         toggleImportance={()=>toggleImportance(note.id)}/>\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input \r\n        value={newNote}\r\n        onChange={handleNoteChange}/>\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n     );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vital"],"sourceRoot":""}